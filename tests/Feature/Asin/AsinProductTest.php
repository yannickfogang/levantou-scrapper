<?php

namespace Tests\Feature\Asin;

use App\Models\Asin;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Module\Application\Product\Asin\save\SaveAsinCommand;
use Module\Application\Product\Asin\save\SaveAsinHandler;
use Module\Domain\Product\Exception\AsinAlreadyExistException;
use Module\Infrastructure\Product\AsinEloquentRepository;
use Tests\TestCase;

class AsinProductTest extends TestCase
{

    use RefreshDatabase;

    private AsinEloquentRepository $asinRepository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->asinRepository = new AsinEloquentRepository();
    }

    public function test_can_save_asin_product() {
        $asinCommand = new SaveAsinCommand();
        $asinCommand->asin = 'B072BWF93B';
        $saveAsin = new SaveAsinHandler($this->asinRepository);
        $response = $saveAsin->__invoke($asinCommand);
        $this->assertCount(1, Asin::all());
    }

    public function test_error_exception_when_save_asin_already_exist() {
        $asinCommand = new SaveAsinCommand();
        $asinCommand->asin = 'B072BWF93B';
        $saveAsin = new SaveAsinHandler($this->asinRepository);
        $response = $saveAsin->__invoke($asinCommand);
        try {
            $asinCommand = new SaveAsinCommand();
            $asinCommand->asin = 'B072BWF93B';
            $saveAsin = new SaveAsinHandler($this->asinRepository);
            $response = $saveAsin->__invoke($asinCommand);
        } catch (AsinAlreadyExistException $e) {}
        $this->assertCount(1, Asin::all());
    }

}
