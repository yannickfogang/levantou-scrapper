<?php

namespace Tests\Unit\Scrapper;

use Module\Application\Scrapper\Load\LoadProductHandler;
use Module\Infrastructure\Product\ProductRepositoryInMemory;
use Module\Infrastructure\Scrapper\Curl;
use Module\Infrastructure\Scrapper\ScrapperWebScrappingApi;
use Tests\TestCase;

class ScrapperTest extends TestCase
{
    private ScrapperWebScrappingApi $scrapperApi;
    private string $asin;
    private ProductRepositoryInMemory $productRepository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->asin = 'B09KQ89Q15';
        $curl = new Curl();
        $this->scrapperApi = new ScrapperWebScrappingApi($curl);
        $this->productRepository = new ProductRepositoryInMemory();
    }

    public function test_can_load_page_to_extract_default_data()
    {
        $product = $this->scrapperApi->extractDefaultProductDetailsData($this->asin);
        $this->assertNotNull($product);
        $this->assertObjectHasAttribute('title',$product);
        $this->assertObjectHasAttribute('description',$product);
        $this->assertObjectHasAttribute('price',$product);
        $this->assertObjectHasAttribute('saler_by',$product);
        $this->assertObjectHasAttribute('sender_on_store',$product);
    }

    public function test_can_load_and_save_product() {
        $loadProduct = new LoadProductHandler($this->scrapperApi, $this->productRepository);
        $response = $loadProduct->__invoke($this->asin);
        $this->assertTrue($response->isLoad);
        $this->assertTrue($response->isSave);
    }

}
