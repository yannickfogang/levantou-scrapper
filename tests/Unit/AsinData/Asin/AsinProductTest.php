<?php

namespace Tests\Unit\AsinData\Asin;

use Module\Application\Product\Asin\save\SaveAsinCommand;
use Module\Application\Product\Asin\save\SaveAsinHandler;
use Module\Domain\Product\Exception\AsinAlreadyExistException;
use Module\Infrastructure\Product\AsinInMemoryRepository;
use Tests\TestCase;

class AsinProductTest extends TestCase
{

    private AsinInMemoryRepository $asinRepository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->asinRepository = new AsinInMemoryRepository();
    }

    public function test_can_save_asin_product() {
        $asinCommand = new SaveAsinCommand();
        $asinCommand->asin = 'B072BWF93B';
        $saveAsin = new SaveAsinHandler($this->asinRepository);
        $response = $saveAsin->__invoke($asinCommand);
        $this->assertTrue($response->isSave);
        $this->assertNotNull($response->asin);
    }

    public function test_error_exception_when_save_asin_already_exist() {
        $asinCommand = new SaveAsinCommand();
        $asinCommand->asin = 'B072BWF93B';
        $saveAsin = new SaveAsinHandler($this->asinRepository);
        $response = $saveAsin->__invoke($asinCommand);

        $asinCommand = new SaveAsinCommand();
        $asinCommand->asin = 'B072BWF93B';
        $saveAsin = new SaveAsinHandler($this->asinRepository);

        $this->expectException(AsinAlreadyExistException::class);
        $this->expectExceptionMessage('Ce produit Asin a été déjà enregistré');

        $response = $saveAsin->__invoke($asinCommand);
    }


}
